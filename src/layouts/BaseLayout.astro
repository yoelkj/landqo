---
import "@/styles/global.css";
import Header from "@/components/header/Header.astro";
import Footer from "@/components/footer/Footer.astro";
import ScrollUI from "@/components/ui/ScrollUI.astro";
import CookieConsent from "@/components/ui/CookieConsent.astro";
import { buildSeo } from "@/utils/seo";

const {
  // ⤵️ Branding por defecto para Landqo (solo contenido, no rompe nada)
  title = "Landqo — Landing pages que convierten",
  lang = "es",
  tenant: tenantProp,
  theme: themeProp, // light | dark | auto
  seo: seoProps = {}, // SEO opcional por página
} = Astro.props as any;

// SEO
const seo = buildSeo(seoProps, { site: Astro.site, url: Astro.url });
const metaTags = (seo.tags?.meta ?? []) as Array<Record<string, string>>;
const linkTags = (seo.tags?.link ?? []) as Array<Record<string, string>>;
const scriptTags = (seo.tags?.script ?? []) as Array<{ type?: string; innerHTML: string }>;

// ── Indexación: respetar prop y permitir desactivar por ENV (PUBLIC_INDEXING=false)
const PUBLIC_INDEXING = String(import.meta.env.PUBLIC_INDEXING ?? "true").toLowerCase() !== "false";
const NOINDEX =
  !PUBLIC_INDEXING ||
  Boolean(seoProps?.noindex) ||
  metaTags.some((m) => (m.name || "").toLowerCase() === "robots" && (m.content || "").includes("noindex"));

// ── Canonical robusto (solo si indexable)
const siteFromEnv = (import.meta.env.PUBLIC_SITE_URL || "").replace(/\/+$/, "");
const currentPathAndQs = Astro.url ? (Astro.url.pathname + (Astro.url.search || "")) : "/";
const fallbackOrigin =
  (Astro.site ? String(Astro.site).replace(/\/+$/, "") : "") ||
  (Astro.url ? Astro.url.origin : "");
const canonicalHref = (siteFromEnv || fallbackOrigin || "").replace(/\/+$/, "") + currentPathAndQs;

const hasCanonical = linkTags.some((t) => (t.rel || "").toLowerCase() === "canonical");
const hasOgUrl = metaTags.some((m) => (m.property || "").toLowerCase() === "og:url");

// ── Dev helpers via querystring
const qs = Astro.url?.searchParams;
const qsTenant = qs?.get("tenant") || null; // default | single-hex | multicolor-hex
const qsTheme = qs?.get("theme") || null;   // light | dark | auto

// ── Env públicas
const ENV_TENANT = (import.meta.env.PUBLIC_TENANT || "").trim().toLowerCase();
const ENV_COLOR_MODE = (import.meta.env.PUBLIC_COLOR_MODE || "").trim().toLowerCase();
const ENV_THEME_RAW = (import.meta.env.PUBLIC_THEME || "").trim().toLowerCase();
const GA_ID = (import.meta.env.PUBLIC_GA_ID || "").trim();

const TENANT_VALUES = new Set(["default", "single-hex", "multicolor-hex"]);
const MODE_VALUES = new Set(["light", "dark", "auto"]);

const ENV_THEME_TENANT = TENANT_VALUES.has(ENV_THEME_RAW) ? ENV_THEME_RAW : null;
const ENV_THEME_MODE = MODE_VALUES.has(ENV_THEME_RAW) ? ENV_THEME_RAW : null;

const tenant =
  tenantProp ??
  qsTenant ??
  (TENANT_VALUES.has(ENV_TENANT) ? ENV_TENANT : null) ??
  ENV_THEME_TENANT ??
  "default";
const theme =
  themeProp ??
  qsTheme ??
  (MODE_VALUES.has(ENV_COLOR_MODE) ? ENV_COLOR_MODE : null) ??
  ENV_THEME_MODE ??
  null;

const dataTenant = tenant === "default" ? undefined : tenant;
const dataTheme = theme ?? undefined;

// X-Robots para noindex (si el adaptador lo soporta)
if (NOINDEX && Astro.response) {
  try { Astro.response.headers.set("X-Robots-Tag", "noindex, nofollow"); } catch {}
}
---

<html lang={lang} data-tenant={dataTenant} data-theme={dataTheme}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="color-scheme" content="light dark" />

    <title>{seo.title || title}</title>

    {/* Meta / OG / Twitter generados */}
    {metaTags.map((m) => <meta {...m} />)}
    {linkTags.map((l) => <link {...l} />)}
    {scriptTags.map((s) => <script type={s.type} set:html={s.innerHTML} />)}

    {/* Robots noindex (si aplica) */}
    {NOINDEX && <meta name="robots" content="noindex, nofollow" />}
    {NOINDEX && <meta name="googlebot" content="noindex, nofollow" />}

    {/* Canonical y og:url solo si indexable */}
    {!NOINDEX && !hasCanonical && canonicalHref && <link rel="canonical" href={canonicalHref} />}
    {!NOINDEX && !hasOgUrl && canonicalHref && <meta property="og:url" content={canonicalHref} />}

    {/* Favicons */}
    <link rel="icon" href="/favicon.ico" sizes="any" />
    <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
    <link rel="apple-touch-icon" href="/apple-touch-icon.png" />

    {/* Dev helper: tenant/theme via querystring */}
    <script is:inline>
      (() => {
        const p = new URLSearchParams(location.search);
        const t = p.get("tenant");
        const th = p.get("theme");
        if (t) {
          if (t === "default")
            document.documentElement.removeAttribute("data-tenant");
          else document.documentElement.setAttribute("data-tenant", t);
        }
        if (th) document.documentElement.setAttribute("data-theme", th);
      })();
    </script>

    {/* Google Analytics (consent-aware) */}
    {GA_ID && (
      <script is:inline>
        (function () {
          var GA_ID = {GA_ID:JSON.stringify(GA_ID)}.GA_ID.replace(/(^"|"$)/g, "");
          function loadGA(id) {
            if (!id || window.__gaLoaded) return;
            window.__gaLoaded = true;
            var s1 = document.createElement("script");
            s1.async = true;
            s1.src = "https://www.googletagmanager.com/gtag/js?id=" + encodeURIComponent(id);
            document.head.appendChild(s1);
            var s2 = document.createElement("script");
            s2.innerHTML = [
              "window.dataLayer = window.dataLayer || [];",
              "function gtag(){dataLayer.push(arguments);}",
              "gtag('js', new Date());",
              "gtag('config', '" + id + "');"
            ].join("\n");
            document.head.appendChild(s2);
          }
          function getConsent() {
            try { return localStorage.getItem("cookie:consent") || ""; } catch (_) { return ""; }
          }
          if (getConsent() === "all") { loadGA(GA_ID); }
          window.addEventListener("cookie:consent-changed", function (ev) {
            var v = ev && ev.detail && ev.detail.value;
            if (v === "all") loadGA(GA_ID);
          });
        })();
      </script>
    )}

    <slot name="head" />
  </head>

  <body class="min-h-screen bg-[color:var(--color-bg)] text-[color:var(--color-fg)] antialiased">
    <Header />
    <main class="min-h-[60vh]" role="main">
      <slot />
    </main>
    <Footer />

    <ScrollUI showBar={true} showGoTop={true} spy={true} />
    <CookieConsent
      message="Usamos cookies para mejorar tu experiencia."
      policyHref="/legales/cookies/"
      acceptLabel="Aceptar"
      rejectLabel="Rechazar"
      position="bottom"
      compact={true}
    />
  </body>
</html>
