---
import type { BaseSectionProps, Variant } from "@/utils/section-types";
import { sectionVariantClasses } from "@/utils/section-variants";

interface Props extends BaseSectionProps {
  as?: keyof HTMLElementTagNameMap;
  titleAccent?: "none" | "underline" | "pill-left" | "pill-top";
  subtitleMuted?: boolean;
}

const {
  id,
  title,
  subtitle,
  variant = "default" as Variant,
  className = "",
  as = "section",
  titleAccent = "none",
  subtitleMuted = true,
} = Astro.props as Props;

const Tag = as as any;
const classes = sectionVariantClasses(variant);
---

<Tag
  id={id}
  class={`section ${classes} ${className}`.trim()}
  aria-labelledby={title ? `${id || "section"}-title` : undefined}
>
  {
    (title || subtitle) && (
      <div class="container mb-6 text-center">
        <div class="relative inline-block">
          {titleAccent === "pill-top" && (
            <span
              class="absolute -top-3 left-1/2 -translate-x-1/2 h-1.5 w-10 rounded-full
                   bg-[var(--color-primary)] opacity-70"
              aria-hidden="true"
            />
          )}

          {titleAccent === "pill-left" && (
            <span
              class="absolute left-0 -translate-x-4 top-1/2 -translate-y-1/2 h-8 w-1.5 rounded-full
                   bg-[var(--color-primary)] opacity-70 hidden sm:block"
              aria-hidden="true"
            />
          )}

          <h2 id={`${id || "section"}-title`} class="h2">
            {title}
          </h2>

          {titleAccent === "underline" && (
            <i
              aria-hidden="true"
              class="mt-2 block h-1 w-24 sm:w-28 mx-auto rounded
                   bg-[var(--color-primary)] opacity-60"
            />
          )}
        </div>

        {subtitle && (
          <p
            class={`lead mt-2 ${subtitleMuted ? "text-[color:var(--color-fg-muted)]" : "text-[color:var(--color-fg)]"}`}
          >
            {subtitle}
          </p>
        )}
      </div>
    )
  }
  <slot />
</Tag>
