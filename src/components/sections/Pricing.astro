---
/**
 * Pricing.astro — Tabla de precios con toggle mensual/anual (sin animaciones)
 *
 * ✅ Características
 * - Toggle accesible Mensual/Anual (botones aria-pressed; teclado ← → Space/Enter)
 * - Precios y “/mes” vs “/año” conmutables sin recargar
 * - Resalta “Popular” con diseño profesional (borde, glow sutil, fondo gradiente)
 * - Tokens y variantes visuales via <Section variant="...">
 * - Sin transiciones/animaciones JS; solo estilos
 *
 * Props:
 * - id?: string
 * - title?: string
 * - subtitle?: string
 * - variant?: "default" | "alt" | "inverted"
 * - className?: string
 * - currency?: string                     (default: "USD")
 * - locale?: string                       (default: "es-PE")
 * - defaultBilling?: "monthly" | "yearly" (default: "monthly")
 * - discountNote?: string                 (nota junto al toggle)
 * - cols?: 2 | 3                          (default: 3 → en desktop)
 * - plans: Array<{
 *     name: string;
 *     description?: string;
 *     badge?: string;          // p.ej. "Popular"
 *     popular?: boolean;       // aplica estilo destacado
 *     price: { monthly: number; yearly: number };
 *     features?: string[];
 *     cta?: { label: string; href: string };
 *   }>
 */

import Section from "@/components/ui/Section.astro";
import type { Variant } from "@/utils/section-types";

type Plan = {
  name: string;
  description?: string;
  badge?: string;
  popular?: boolean;
  price: { monthly: number; yearly: number };
  features?: string[];
  cta?: { label: string; href: string };
};

interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  variant?: Variant;
  className?: string;
  currency?: string;
  locale?: string;
  defaultBilling?: "monthly" | "yearly";
  discountNote?: string;
  cols?: 2 | 3;
  plans: Plan[];
}

const {
  id = "pricing",
  title = "Precios",
  subtitle,
  variant = "default",
  className = "",
  currency = "USD",
  locale = "es-PE",
  defaultBilling = "monthly",
  discountNote,
  cols = 3,
  plans = [],
} = Astro.props as Props;

// Estado inicial: querystring ?billing=yearly|monthly o prop
const qs = Astro.url?.searchParams?.get("billing");
const initBilling = (qs === "yearly" || qs === "monthly") ? qs : defaultBilling;

const gridCols = cols === 2 ? "sm:grid-cols-2 lg:grid-cols-2" : "sm:grid-cols-2 lg:grid-cols-3";

const fmt = (n: number) => {
  try { return new Intl.NumberFormat(locale, { style: "currency", currency }).format(n); }
  catch { return `${currency} ${n}`; }
};

const perMonth = "/mes";
const perYear  = "/año";
const rootId = `${id}-root`;
const noteId = discountNote ? `${id}-discount` : undefined;
---

<Section id={id} title={title} subtitle={subtitle} variant={variant} className={className}>
  <div id={rootId} class="container" data-billing={initBilling} data-init={initBilling}>
    <!-- Toggle de intervalo -->
    <div class="flex flex-wrap items-center justify-center gap-3">
      <span class="text-sm text-[color:var(--color-fg-muted)]">Facturación</span>

      <div
        role="group"
        aria-label="Intervalo"
        class="billing-toggle inline-flex rounded-[var(--radius-lg)] ring-1 ring-[color:var(--color-border)] bg-[color:var(--color-surface)]"
        {...(noteId ? { 'aria-describedby': noteId } : {})}
      >
        <button
          type="button"
          data-mode="monthly"
          class="seg-btn"
          aria-pressed={initBilling === "monthly" ? "true" : "false"}
        >
          Mensual
        </button>
        <button
          type="button"
          data-mode="yearly"
          class="seg-btn border-l border-[color:var(--color-border)]"
          aria-pressed={initBilling === "yearly" ? "true" : "false"}
        >
          Anual
        </button>
      </div>

      {discountNote && (
        <span id={noteId} class="text-xs text-[color:var(--color-fg-muted)]">
          {discountNote}
        </span>
      )}
    </div>

    <!-- Cards -->
    <ul class={`mt-8 grid gap-6 ${gridCols}`} role="list">
      {
        plans.map((p) => (
          <li
            data-popular={p.popular ? "true" : "false"}
            class={`pricing-card h-full card p-6 md:p-7 rounded-[var(--radius-2xl)]
                    border border-[color:var(--color-border)] shadow-[var(--shadow-sm)]
                    ${p.popular ? "is-popular" : ""}`}
          >
            <!-- Cinta “Popular” -->
            {p.popular && (
              <span class="popular-badge" aria-hidden="true">
                {p.badge || "Popular"}
              </span>
            )}

            <!-- Header -->
            <div class="flex items-start justify-between gap-3">
              <div>
                <h3 class="text-lg md:text-xl font-semibold tracking-tight">{p.name}</h3>
                {p.description && <p class="mt-1 text-sm text-[color:var(--color-fg-muted)]">{p.description}</p>}
              </div>
              {!p.popular && p.badge && (
                <span class="chip">{p.badge}</span>
              )}
            </div>

            <!-- Precio -->
            <div class="mt-5 price-block" aria-live="polite">
              <div class="flex items-baseline gap-2">
                <span
                  data-price="monthly"
                  class={initBilling === "yearly" ? "hidden" : ""}
                  aria-hidden={initBilling === "yearly" ? "true" : "false"}
                >
                  <span class="text-3xl md:text-[2rem] font-extrabold">{fmt(p.price.monthly)}</span>
                </span>

                <span
                  data-price="yearly"
                  class={initBilling === "monthly" ? "hidden" : ""}
                  aria-hidden={initBilling === "monthly" ? "true" : "false"}
                >
                  <span class="text-3xl md:text-[2rem] font-extrabold">{fmt(p.price.yearly)}</span>
                </span>

                <span data-per="monthly" class={`per text-sm ${initBilling === "yearly" ? "hidden" : ""}`}>{perMonth}</span>
                <span data-per="yearly"  class={`per text-sm ${initBilling === "monthly" ? "hidden" : ""}`}>{perYear}</span>
              </div>
            </div>

            <!-- Features -->
            {p.features && p.features.length > 0 && (
              <ul class="mt-5 grid gap-2 text-sm">
                {p.features.map((f) => (
                  <li class="flex items-start gap-2">
                    <svg class="h-4 w-4 mt-0.5 text-[color:var(--color-primary)]" viewBox="0 0 24 24" aria-hidden="true">
                      <path fill="currentColor" d="M9.5 16.2l-3.7-3.7 1.4-1.4 2.3 2.3 6-6 1.4 1.4z"/>
                    </svg>
                    <span>{f}</span>
                  </li>
                ))}
              </ul>
            )}

            <!-- CTA -->
            {p.cta && (
              <div class="mt-6">
                <a
                  href={p.cta.href}
                  class={`btn w-full h-10 rounded-[var(--radius-lg)] transition-none ${p.popular ? "btn-primary" : "btn-outline"}`}
                >
                  {p.cta.label}
                </a>
              </div>
            )}
          </li>
        ))
      }
    </ul>
  </div>
</Section>

<style is:inline>
  /* Toggle */
  .seg-btn {
    padding: .5rem .75rem;
    font-weight: 600;
    font-size: .95rem;
    line-height: 1;
    color: color-mix(in oklch, var(--color-fg) 80%, transparent);
    outline: none;
  }
  .seg-btn[aria-pressed="true"] {
    background: var(--color-bg-elev);
    color: var(--color-fg);
    box-shadow: inset 0 0 0 1px var(--color-border);
    border-radius: var(--radius-md);
  }
  .seg-btn:focus-visible {
    outline: 2px solid var(--color-ring);
    outline-offset: 2px;
    border-radius: var(--radius-md);
  }

  /* Card base */
  .pricing-card {
    position: relative;
    overflow: hidden;
    isolation: isolate;
  }

  /* Chip neutro (no popular) */
  .chip {
    display: inline-flex;
    align-items: center;
    padding: .25rem .5rem;
    font-size: .75rem;
    border-radius: 999px;
    background: var(--color-bg-elev);
    color: var(--color-fg);
    box-shadow: inset 0 0 0 1px var(--color-border);
  }

  /* POPULAR — realce visual profesional, sin animaciones */
  .pricing-card.is-popular {
    border-color: color-mix(in oklch, var(--color-primary) 40%, var(--color-border));
    box-shadow:
      0 1px 2px hsl(220 3% 15% / .08),
      0 10px 30px color-mix(in oklch, var(--color-primary) 20%, transparent);
  }
  .pricing-card.is-popular::before {
    content: "";
    position: absolute;
    inset: -1px;
    background:
      radial-gradient(700px 200px at 0% -10%, color-mix(in oklch, var(--color-primary) 8%, transparent), transparent 60%),
      radial-gradient(700px 200px at 100% -10%, color-mix(in oklch, var(--color-primary) 8%, transparent), transparent 60%);
    z-index: -1;
  }
  .pricing-card.is-popular::after {
    /* barra superior sutil */
    content: "";
    position: absolute;
    inset-inline: -1px;
    top: -1px;
    height: 6px;
    background: linear-gradient(90deg, color-mix(in oklch, var(--color-primary) 85%, white), var(--color-primary));
  }

  .popular-badge {
    position: absolute;
    top: .5rem;
    right: .5rem;
    padding: .25rem .5rem;
    font-size: .7rem;
    font-weight: 700;
    color: var(--color-on-primary);
    background: var(--color-primary);
    border-radius: 999px;
    box-shadow: var(--shadow-sm);
  }

  /* Precio */
  .price-block .per {
    color: var(--color-fg-muted);
  }

  /* Asegura contraste en tenants oscuros */
  [data-theme="dark"] .pricing-card.is-popular {
    border-color: color-mix(in oklch, var(--color-primary) 50%, var(--color-border));
  }
</style>

<script is:inline data-root-id={rootId}>
  (function () {
    var s = document.currentScript;
    var rootId = s && s.dataset ? s.dataset.rootId : "";
    if (!rootId) return;

    var root = document.getElementById(rootId);
    if (!root) return;

    function setMode(mode) {
      if (mode !== "monthly" && mode !== "yearly") mode = "monthly";
      root.setAttribute("data-billing", mode);

      // Toggle aria-pressed
      root.querySelectorAll('[data-mode]').forEach(function (b) {
        b.setAttribute("aria-pressed", b.getAttribute("data-mode") === mode ? "true" : "false");
      });

      var showYearly = mode === "yearly";
      root.querySelectorAll('[data-price="monthly"]').forEach(function (el) {
        el.classList.toggle("hidden", showYearly);
        el.setAttribute("aria-hidden", showYearly ? "true" : "false");
      });
      root.querySelectorAll('[data-price="yearly"]').forEach(function (el) {
        el.classList.toggle("hidden", !showYearly);
        el.setAttribute("aria-hidden", !showYearly ? "true" : "false");
      });
      root.querySelectorAll('[data-per="monthly"]').forEach(function (el) {
        el.classList.toggle("hidden", showYearly);
      });
      root.querySelectorAll('[data-per="yearly"]').forEach(function (el) {
        el.classList.toggle("hidden", !showYearly);
      });
    }

    // Click
    root.querySelectorAll('[data-mode]').forEach(function (b) {
      b.addEventListener("click", function () {
        var mode = b.getAttribute("data-mode");
        setMode(mode);
        try {
          var url = new URL(window.location.href);
          url.searchParams.set("billing", mode);
          window.history.replaceState({}, "", url.toString());
        } catch {}
      });

      // Teclado: ← → Space / Enter
      b.addEventListener("keydown", function (ev) {
        var key = ev.key;
        if (key === " " || key === "Enter") {
          ev.preventDefault();
          var m = b.getAttribute("data-mode");
          setMode(m);
        } else if (key === "ArrowLeft" || key === "ArrowRight") {
          ev.preventDefault();
          var current = root.getAttribute("data-billing") || "monthly";
          var next = (key === "ArrowRight") ? "yearly" : "monthly";
          if (current === next && key === "ArrowLeft") next = "monthly";
          setMode(next);
          var target = root.querySelector('[data-mode="' + next + '"]');
          if (target) target.focus();
        }
      });
    });

    // Init
    setMode(root.getAttribute("data-init") || "monthly");
  })();
</script>
