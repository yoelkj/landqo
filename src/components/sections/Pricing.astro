---
/**
 * Pricing.astro — Toggle controla precio principal (mensual/anual)
 * FIX: en móvil la “seg-slider” podía salirse del flujo por el sticky y
 * superponerse al hero. Ahora el sticky solo aplica ≥768px y el toggle
 * crea un stacking context seguro. Además, la seg-slider no capta eventos.
 */

import Section from "@/components/ui/Section.astro";
import type { Variant } from "@/utils/section-types";
import { CONTACT } from "@/utils/contact";

type Price = { monthly: number; yearly: number };
type PriceBefore = { monthly?: number; yearly?: number };

type Plan = {
  name: string;
  description?: string;
  badge?: string;
  popular?: boolean;
  price: Price;
  priceBefore?: PriceBefore;
  setupFrom?: number;
  setupFromBefore?: number;
  features?: string[];
  cta?: { label: string; href: string };
  offers?: boolean;
};

interface Props {
  id?: string;
  title?: string;
  subtitle?: string;
  variant?: Variant;
  className?: string;
  currency?: string;
  locale?: string;
  defaultBilling?: "monthly" | "yearly";
  discountNote?: string;
  igvNote?: string;
  valueSummary?: string;
  promoNote?: string;
  cols?: 2 | 3;
  plans: Plan[];
  footnotes?: string[];
  offers?: boolean;
}

const {
  id = "pricing",
  title = "Precios",
  subtitle,
  variant = "default",
  className = "",
  currency = "PEN",
  locale = "es-PE",
  defaultBilling = "monthly",
  discountNote,
  igvNote = "Los precios no incluyen IGV (18%).",
  valueSummary,
  promoNote,
  cols = 3,
  plans = [],
  footnotes = [],
  offers = true,
} = Astro.props as Props;

const qs = Astro.url?.searchParams?.get("billing");
const initBilling = (qs === "yearly" || qs === "monthly") ? qs : defaultBilling;

const gridCols = cols === 2 ? "sm:grid-cols-2 lg:grid-cols-2" : "sm:grid-cols-2 lg:grid-cols-3";

const fmt = (n: number) => {
  try { return new Intl.NumberFormat(locale, { style: "currency", currency }).format(n); }
  catch { return `${currency} ${n}`; }
};

function saveMeta(before?: number, now?: number) {
  if (before == null || now == null || before <= now) return null;
  const amt = before - now;
  const pct = Math.round((amt / before) * 100);
  return { amt, pct };
}
function monthlyEq(y?: number) {
  if (typeof y !== "number") return null;
  return y / 12;
}

const perMonth = "/mes";
const perYear  = "/año";
const rootId = `${id}-root`;

const showOffersGlobally = Boolean(offers);
const showDiscountNote  = showOffersGlobally && !!discountNote;
const noteId = showDiscountNote ? `${id}-discount` : undefined;
---

<Section
  id={id}
  title={title}
  subtitle={subtitle}
  variant={variant}
  className={className}
  titleAccent="underline"
  subtitleMuted={true}
>
  <!-- Toggle destacado -->
  <div id={rootId} class="container" data-billing={initBilling} data-init={initBilling}>
    <div class="toggle-bar" role="region" aria-label="Selector de facturación">
      <div
        role="group"
        aria-label="Intervalo de facturación"
        class="billing-toggle"
        {...(noteId ? { 'aria-describedby': noteId } : {})}
      >
        <span class="seg-slider" aria-hidden="true"></span>
        <button type="button" class="seg-btn" data-mode="monthly" aria-pressed={initBilling === "monthly" ? "true" : "false"}>Mensual</button>
        <button type="button" class="seg-btn" data-mode="yearly"  aria-pressed={initBilling === "yearly"  ? "true" : "false"}>Anual</button>
      </div>
      <div class="toggle-aux">
        <span class="mode mode-monthly" aria-live="polite">Mostrando precios mensuales</span>
        <span class="mode mode-yearly"  aria-live="polite">Mostrando precios anuales</span>
        {showDiscountNote && <span id={noteId} class="discount-pill">{discountNote}</span>}
      </div>
    </div>

    <!-- Grid de planes -->
    <ul class={`mt-8 grid ${gridCols} gap-8 items-stretch`} role="list">
      {
        plans.map((p) => {
          const offersOn = p.offers ?? showOffersGlobally;

          const setupSave   = offersOn ? saveMeta(p.setupFromBefore, p.setupFrom) : null;
          const monthlySave = offersOn ? saveMeta(p.priceBefore?.monthly, p.price.monthly) : null;
          const yearlySave  = offersOn ? saveMeta(p.priceBefore?.yearly,  p.price.yearly)  : null;

          const showBeforeMonthly = offersOn && p.priceBefore?.monthly != null;
          const showBeforeYearly  = offersOn && p.priceBefore?.yearly  != null;
          const showSetupBefore   = offersOn && typeof p.setupFromBefore === "number";

          // CTA → WhatsApp (target _blank) con fallback al href del content
          let ctaLink: { href: string; target?: string; rel?: string } | null = null;
          if (p.cta) {
            const isVentas = /venta/i.test(p.cta.label);
            ctaLink = CONTACT.ctaLink({
              intent: isVentas ? "ventas" : "contratar",
              plan: p.name,
              source: "pricing",
              fallback: p.cta.href,
            });
          }

          return (
            <li data-popular={p.popular ? "true" : "false"} class={`pricing-card h-full card ${p.popular ? "is-popular" : ""}`}>
              {p.popular && <span class="popular-badge" aria-hidden="true">{p.badge || "Popular"}</span>}
              {!p.popular && p.badge && <span class="badge">{p.badge}</span>}

              <div class="head">
                <h3 class="plan-title">{p.name}</h3>
                {p.description && <p class="plan-desc">{p.description}</p>}
              </div>

              <!-- Precio principal (toggle mensual/anual) -->
              <div class="price-hero" aria-live="polite">
                <!-- Mensual -->
                <div class="hero-line" data-price="monthly" {...(initBilling === "yearly" ? { hidden: true, 'aria-hidden': 'true' } : { 'aria-hidden': 'false' })}>
                  <span class="big">{fmt(p.price.monthly)}</span>
                  <span class="per">{perMonth}</span>
                  {monthlySave && <span class="save-chip">Ahorra {fmt(monthlySave.amt)} ({monthlySave.pct}%)</span>}
                  {showBeforeMonthly && <span class="before">Antes {fmt(p.priceBefore!.monthly!)}</span>}
                </div>

                <!-- Anual -->
                <div class="hero-line" data-price="yearly" {...(initBilling === "monthly" ? { hidden: true, 'aria-hidden': 'true' } : { 'aria-hidden': 'false' })}>
                  <span class="big">{fmt(p.price.yearly)}</span>
                  <span class="per">{perYear}</span>
                  {yearlySave && <span class="save-chip">Ahorra {fmt(yearlySave.amt)} ({yearlySave.pct}%)</span>}
                  {showBeforeYearly && <span class="before">Antes {fmt(p.priceBefore!.yearly!)}</span>}
                  {typeof p.price.yearly === "number" && <span class="eq">≈ {fmt(monthlyEq(p.price.yearly) || 0)} {perMonth}</span>}
                </div>
              </div>

              <div class="divider" aria-hidden="true"></div>

              {(typeof p.setupFrom === "number" || showSetupBefore) && (
                <div class="impl-line">
                  <span class="impl-title">Implementación (pago único)</span>
                  <span class="impl-now">{typeof p.setupFrom === "number" ? fmt(p.setupFrom) : null}</span>
                  {showSetupBefore && <span class="impl-before">Antes {fmt(p.setupFromBefore!)}</span>}
                  {setupSave && <span class="impl-save">Ahorra {fmt(setupSave.amt)} ({setupSave.pct}%)</span>}
                </div>
              )}

              {p.features && p.features.length > 0 && (
                <>
                  <div class="sub-divider" aria-hidden="true"></div>
                  <ul class="features" role="list">
                    {p.features.map((f) => (
                      <li class="feat">
                        <svg class="tick" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M9.5 16.2l-3.7-3.7 1.4-1.4 2.3 2.3 6-6 1.4 1.4z"/></svg>
                        <span>{f}</span>
                      </li>
                    ))}
                  </ul>
                </>
              )}

              {p.cta && ctaLink && (
                <div class="cta-wrap">
                  <a
                    href={ctaLink.href}
                    class={`btn w-full rounded-[var(--radius-lg)] transition-none ${p.popular ? "btn-primary btn-lg" : "btn-outline btn-md"}`}
                    {...(ctaLink.target ? { target: ctaLink.target, rel: ctaLink.rel } : {})}
                  >
                    {p.cta.label}
                  </a>
                </div>
              )}
            </li>
          );
        })
      }
    </ul>

    {(valueSummary || (showOffersGlobally && promoNote)) && (
      <div class="mt-8 space-y-3">
        {valueSummary && <div class="value-summary">{valueSummary}</div>}
        {(showOffersGlobally && promoNote) && <div class="promo-note">{promoNote}</div>}
      </div>
    )}

    {igvNote && <p class="legal-note">{igvNote}</p>}

    {Array.isArray(footnotes) && footnotes.length > 0 && (
      <ul class="footnotes" role="list">
        {footnotes.map((n) => <li>{n}</li>)}
      </ul>
    )}
  </div>
</Section>

<style is:inline>
  [hidden]{display:none!important}

  /* Toggle bar */
  .toggle-bar{
    display:grid; gap:.5rem; justify-items:center; margin-top:.5rem;
    isolation:isolate; /* crea stacking context local, evita fugas */
  }
  .billing-toggle{
    position:sticky; top:10px; z-index:1; /* bajo, solo ≥768px */
    display:grid; grid-template-columns:1fr 1fr; padding:2px;
    border-radius:999px; background:var(--color-surface);
    box-shadow:inset 0 0 0 1px var(--color-border), var(--shadow-sm);
    contain:layout paint; /* no pinta fuera del bloque */
  }
  /* Desactivar sticky en móvil y tablet para evitar superposición */
  @media (max-width: 767px){
    .billing-toggle{ position:static; top:auto; }
  }

  .seg-slider{
    position:absolute; inset:2px auto 2px 2px; width:calc(50% - 2px);
    border-radius:999px; background:var(--color-bg-elev);
    box-shadow:inset 0 0 0 1px var(--color-border);
    transition:transform .22s cubic-bezier(.22,.61,.36,1);
    pointer-events:none; /* nunca captura eventos */
  }
  [data-billing="yearly"] .seg-slider{ transform: translateX(100%); }

  .seg-btn{
    position:relative; z-index:2; padding:.65rem 1.2rem;
    font-weight:800; font-size:.95rem; border-radius:999px;
    color:color-mix(in oklch,var(--color-fg) 92%, transparent);
  }
  .seg-btn[aria-pressed="true"]{ color:var(--color-fg); }
  .seg-btn:focus-visible{ outline:2px solid var(--color-ring); outline-offset:2px; border-radius:999px; }

  .toggle-aux{ display:flex; flex-wrap:wrap; align-items:center; gap:.5rem .75rem; font-size:.88rem; }
  .mode{ color:var(--color-fg-muted); }
  [data-billing="monthly"] .mode-yearly{ display:none; }
  [data-billing="yearly"]  .mode-monthly{ display:none; }
  .discount-pill{
    padding:.25rem .6rem; border-radius:999px; font-weight:700; font-size:.78rem;
    background:color-mix(in oklch, var(--color-primary) 12%, var(--color-bg));
    color:color-mix(in oklch, var(--color-primary) 92%, var(--color-fg));
    box-shadow:inset 0 0 0 1px color-mix(in oklch, var(--color-primary) 50%, var(--color-border));
  }

  /* Cards */
  .pricing-card{ position:relative; overflow:hidden; isolation:isolate;
    border:1px solid var(--color-border); border-radius:var(--radius-2xl);
    background:var(--color-surface); box-shadow:var(--shadow-sm); padding:1.25rem; }
  @media (min-width:1024px){ .pricing-card{ padding:1.5rem; } }
  .popular-badge,.badge{ position:absolute; top:.6rem; right:.6rem; padding:.3rem .55rem;
    font-size:.72rem; font-weight:800; border-radius:999px; }
  .popular-badge{ color:var(--color-on-primary); background:var(--color-primary); box-shadow:var(--shadow-sm); }
  .badge{ background:var(--color-bg-elev); color:var(--color-fg); box-shadow:inset 0 0 0 1px var(--color-border); }
  .pricing-card.is-popular{
    border-color:color-mix(in oklch, var(--color-primary) 40%, var(--color-border));
    box-shadow:0 1px 2px hsl(220 3% 15%/.08), 0 12px 34px color-mix(in oklch, var(--color-primary) 18%, transparent);
  }
  .pricing-card.is-popular::after{
    content:""; position:absolute; inset-inline:-1px; top:-1px; height:6px;
    background:linear-gradient(90deg, color-mix(in oklch, var(--color-primary) 85%, white), var(--color-primary));
  }

  .head{ padding-top:.25rem; }
  .plan-title{ font-weight:800; letter-spacing:-.01em; font-size:1.125rem; }
  .plan-desc{ margin-top:.25rem; font-size:.95rem; color:var(--color-fg-muted); }

  .price-hero{ display:grid; gap:.35rem; margin-top:.75rem; }
  .hero-line{ display:flex; flex-wrap:wrap; align-items:baseline; gap:.5rem .75rem; }
  .big{ font-weight:900; font-size:clamp(2rem,3.2vw,2.6rem); line-height:1.08; letter-spacing:-.01em; }
  .per{ color:var(--color-fg-muted); font-weight:600; font-size:.95rem; }
  .before{ font-size:.92rem; color:color-mix(in oklch, var(--color-fg-muted) 85%, transparent); text-decoration:line-through; }
  .eq{ font-size:.88rem; color:var(--color-fg-muted); }
  .save-chip{ display:inline-flex; align-items:center; gap:.35rem; font-size:.72rem; font-weight:700; padding:.2rem .5rem; border-radius:999px;
    background:color-mix(in oklch, var(--color-primary) 12%, var(--color-bg));
    color:color-mix(in oklch, var(--color-primary) 90%, var(--color-fg));
    box-shadow:inset 0 0 0 1px color-mix(in oklch, var(--color-primary) 50%, var(--color-border)); }

  .divider{ margin:1rem 0; height:1px; background:var(--color-border); opacity:.5 }
  .sub-divider{ margin:.9rem 0; height:1px; background:var(--color-border); opacity:.35 }

  .impl-line{ display:flex; flex-wrap:wrap; align-items:baseline; gap:.5rem .75rem; padding:.6rem .75rem; border-radius:var(--radius-lg);
    background:color-mix(in oklch, var(--color-bg) 84%, var(--color-surface));
    box-shadow:inset 0 0 0 1px var(--color-border); }
  .impl-title{ font-size:.82rem; text-transform:uppercase; letter-spacing:.06em; color:var(--color-fg-muted) }
  .impl-now{ font-weight:800 }
  .impl-before{ font-size:.9rem; color:color-mix(in oklch, var(--color-fg-muted) 85%, transparent); text-decoration:line-through }
  .impl-save{ font-size:.75rem; font-weight:700; color:color-mix(in oklch, var(--color-primary) 90%, var(--color-fg)) }

  .features{ display:grid; gap:.5rem }
  .feat{ display:grid; grid-template-columns:18px 1fr; gap:.5rem; align-items:start; font-size:.95rem }
  .tick{ width:18px; height:18px; margin-top:.1rem; color:var(--color-primary); flex:none }

  .cta-wrap{ margin-top:.9rem }

  .value-summary{ font-size:.96rem; line-height:1.6; padding:.85rem 1rem; border-radius:var(--radius-xl);
    background:color-mix(in oklch, var(--color-bg) 80%, var(--color-surface)); box-shadow:inset 0 0 0 1px var(--color-border) }
  .promo-note{ font-size:.9rem; color:var(--color-fg-muted) }

  .legal-note{ margin-top:1rem; text-align:center; font-size:.8rem; color:var(--color-fg-muted) }
  .footnotes{ margin-top:.5rem; max-width:44rem; margin-left:auto; margin-right:auto; font-size:.8rem; color:var(--color-fg-muted);
    list-style:disc; padding-left:1.25rem; display:grid; gap:.25rem }
</style>

<script is:inline data-root-id={rootId}>
  (function () {
    var s = document.currentScript;
    var rootId = s && s.dataset ? s.dataset.rootId : "";
    if (!rootId) return;
    var root = document.getElementById(rootId);
    if (!root) return;

    function setHidden(el, hide) {
      if (!el) return;
      if (hide) { el.setAttribute("hidden",""); el.setAttribute("aria-hidden","true"); }
      else { el.removeAttribute("hidden"); el.setAttribute("aria-hidden","false"); }
    }

    function setMode(mode) {
      if (mode !== "monthly" && mode !== "yearly") mode = "monthly";
      root.setAttribute("data-billing", mode);

      root.querySelectorAll('[data-mode]').forEach(function (b) {
        b.setAttribute("aria-pressed", b.getAttribute("data-mode") === mode ? "true" : "false");
      });

      var showYearly = mode === "yearly";
      root.querySelectorAll('[data-price="monthly"]').forEach(function (el) { setHidden(el, showYearly); });
      root.querySelectorAll('[data-price="yearly"]').forEach(function (el) { setHidden(el, !showYearly); });

      try { localStorage.setItem("pricing:mode", mode); } catch {}
      try {
        var url = new URL(window.location.href);
        url.searchParams.set("billing", mode);
        window.history.replaceState({}, "", url.toString());
      } catch {}
    }

    function prepare() {
      var mode = root.getAttribute("data-init") || "monthly";
      try {
        var qs = new URL(window.location.href).searchParams.get("billing");
        if (!qs) {
          var stored = localStorage.getItem("pricing:mode");
          if (stored === "monthly" || stored === "yearly") mode = stored;
        }
      } catch {}
      setMode(mode);
    }

    root.querySelectorAll('[data-mode]').forEach(function (b) {
      function activate() { setMode(b.getAttribute("data-mode")); }
      b.addEventListener("click", activate);
      b.addEventListener("keydown", function (ev) {
        var key = ev.key;
        if (key === " " || key === "Enter") { ev.preventDefault(); activate(); }
        else if (key === "ArrowLeft" || key === "ArrowRight") {
          ev.preventDefault();
          var next = (key === "ArrowRight") ? "yearly" : "monthly";
          setMode(next);
          var target = root.querySelector('[data-mode="' + next + '"]');
          if (target) target.focus();
        }
      });
    });

    prepare();
  })();
</script>
