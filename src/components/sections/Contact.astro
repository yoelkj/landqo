---
/**
 * Contact.astro — Sección de contacto profesional
 *
 * ✅ Características:
 * - UI limpia con tokens (cards, btn, inputs con ring/focus).
 * - Accesible: labels, aria-invalid, aria-live, focus management.
 * - Validación en cliente (email/phone) + honeypot anti-spam.
 * - Mejora progresiva: sin JS, POST tradicional al `action`.
 * - Con JS: fetch JSON a `action`, estados de carga y toasts inline.
 *
 * Props:
 * - id?: string                   — id del contenedor (default: "contact")
 * - title?: string                — título (default: "Contáctanos")
 * - subtitle?: string             — subtítulo opcional
 * - variant?: 'default'|'alt'|'inverted' — fondo/contraste (default: 'alt')
 * - className?: string            — clases extra para el wrapper
 * - action?: string               — endpoint POST (default: "/api/contact")
 * - submitLabel?: string          — texto del botón (default: "Enviar")
 * - successMessage?: string       — mensaje de éxito
 * - errorMessage?: string         — mensaje de error genérico
 * - showPhone?: boolean           — mostrar campo teléfono (default: true)
 * - showConsent?: boolean         — mostrar checkbox de consentimiento (default: true)
 * - consentLabel?: string         — texto del consentimiento (puede incluir {privacyLink})
 * - privacyLink?: string          — URL de política de privacidad (opcional)
 */

import Section from "@/components/ui/Section.astro";
import type { BaseSectionProps, Variant } from "@/utils/section-types";
import {
  isValidEmail,
  isValidPhone,
  formDataToObject,
  isHoneypot,
} from "@/utils/forms";

interface Props extends BaseSectionProps {
  action?: string;
  submitLabel?: string;
  successMessage?: string;
  errorMessage?: string;
  showPhone?: boolean | string;
  showConsent?: boolean | string;
  consentLabel?: string;
  privacyLink?: string;
}

// Normalizadores boolean (aceptan boolean o string "true"/"false"/"")
const toBool = (v: unknown, dflt: boolean) => {
  if (v === undefined || v === null) return dflt;
  if (typeof v === "boolean") return v;
  if (typeof v === "string") {
    const s = v.trim().toLowerCase();
    if (s === "") return true;
    if (s === "true") return true;
    if (s === "false") return false;
  }
  return dflt;
};

const {
  id = "contact",
  title = "Contáctanos",
  subtitle,
  variant = "alt" as Variant,
  className = "",

  action = "/api/contact",
  submitLabel = "Enviar",
  successMessage = "¡Gracias! Hemos recibido tu mensaje y te contactaremos pronto.",
  errorMessage = "Ocurrió un error al enviar el formulario. Inténtalo nuevamente.",
  showPhone: rawShowPhone = true,
  showConsent: rawShowConsent = true,
  consentLabel = "Acepto la política de privacidad.",
  privacyLink,
} = Astro.props as Props;

const showPhone = toBool(rawShowPhone, true);
const showConsent = toBool(rawShowConsent, true);

// Armamos el label de consentimiento con enlace si aplica
const consentHtml = privacyLink
  ? consentLabel.replace(
      "{privacyLink}",
      `<a href="${privacyLink}" class="underline hover:no-underline text-[color:var(--color-primary)]">política de privacidad</a>`
    )
  : consentLabel;
---

<Section
  id={id}
  title={title}
  subtitle={subtitle}
  variant={variant}
  className={className}
>
  <div class="container">
    <div class="grid gap-8 lg:grid-cols-5">
      <!-- Lateral (copy / datos / confianza) -->
      <aside class="lg:col-span-2">
        <div class="card p-6 lg:sticky lg:top-[calc(var(--header-h)+16px)]">
          <h3 class="font-semibold text-lg">¿En qué podemos ayudarte?</h3>
          <p class="mt-2 text-[color:var(--color-fg-muted)]">
            Cuéntanos brevemente tu caso. Te responderemos en menos de 24&nbsp;h
            con el siguiente paso y, si aplica, una llamada de descubrimiento.
          </p>

          <ul class="mt-4 space-y-2 text-sm">
            <li class="flex items-center gap-2">
              <span
                class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-[color:var(--color-primary)]/12 text-[color:var(--color-primary)]"
                >✓</span
              >
              Respuesta rápida
            </li>
            <li class="flex items-center gap-2">
              <span
                class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-[color:var(--color-primary)]/12 text-[color:var(--color-primary)]"
                >✓</span
              >
              Sin spam ni compartimos tus datos
            </li>
            <li class="flex items-center gap-2">
              <span
                class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-[color:var(--color-primary)]/12 text-[color:var(--color-primary)]"
                >✓</span
              >
              Soporte en ES/EN
            </li>
          </ul>
        </div>
      </aside>

      <!-- Formulario -->
      <div class="lg:col-span-3">
        <form
          id="contactForm"
          class="card p-6 space-y-5"
          method="post"
          action={action}
          data-action={action}
          novalidate
        >
          <!-- Honeypot -->
          <input
            type="text"
            name="hp"
            autocomplete="off"
            tabindex="-1"
            class="hidden"
            aria-hidden="true"
          />

          <div class="grid gap-5 sm:grid-cols-2">
            <div class="flex flex-col gap-2">
              <label for="name" class="text-sm font-medium">Nombre</label>
              <input
                id="name"
                name="name"
                type="text"
                required
                autocomplete="name"
                placeholder="Tu nombre"
                class="h-11 rounded-lg px-3 bg-[color:var(--color-bg)] text-[color:var(--color-fg)]
                       ring-1 ring-inset ring-[color:var(--color-border)]
                       focus:outline-none focus:ring-2 focus:ring-[color:var(--color-ring)]"
              />
              <p
                class="field-error text-xs text-[color:var(--color-danger)] hidden"
              >
                Ingresa tu nombre.
              </p>
            </div>

            <div class="flex flex-col gap-2">
              <label for="email" class="text-sm font-medium">Email</label>
              <input
                id="email"
                name="email"
                type="email"
                required
                inputmode="email"
                autocomplete="email"
                placeholder="tucorreo@ejemplo.com"
                class="h-11 rounded-lg px-3 bg-[color:var(--color-bg)] text-[color:var(--color-fg)]
                       ring-1 ring-inset ring-[color:var(--color-border)]
                       focus:outline-none focus:ring-2 focus:ring-[color:var(--color-ring)]"
              />
              <p
                class="field-error text-xs text-[color:var(--color-danger)] hidden"
              >
                Ingresa un email válido.
              </p>
            </div>

            {
              showPhone && (
                <div class="flex flex-col gap-2 sm:col-span-2">
                  <label for="phone" class="text-sm font-medium">
                    Teléfono (opcional)
                  </label>
                  <input
                    id="phone"
                    name="phone"
                    type="tel"
                    inputmode="tel"
                    autocomplete="tel"
                    placeholder="+51 999 999 999"
                    class="h-11 rounded-lg px-3 bg-[color:var(--color-bg)] text-[color:var(--color-fg)]
                         ring-1 ring-inset ring-[color:var(--color-border)]
                         focus:outline-none focus:ring-2 focus:ring-[color:var(--color-ring)]"
                  />
                  <p class="field-error text-xs text-[color:var(--color-danger)] hidden">
                    Teléfono inválido.
                  </p>
                </div>
              )
            }

            <div class="flex flex-col gap-2 sm:col-span-2">
              <label for="message" class="text-sm font-medium">Mensaje</label>
              <textarea
                id="message"
                name="message"
                rows={5}
                required
                placeholder="Cuéntanos brevemente tu proyecto o duda…"
                class="rounded-lg px-3 py-2 bg-[color:var(--color-bg)] text-[color:var(--color-fg)]
                       ring-1 ring-inset ring-[color:var(--color-border)]
                       focus:outline-none focus:ring-2 focus:ring-[color:var(--color-ring)]"
              ></textarea>
              <p
                class="field-error text-xs text-[color:var(--color-danger)] hidden"
              >
                El mensaje es obligatorio.
              </p>
            </div>

            {
              showConsent && (
                <div class="sm:col-span-2">
                  <label class="inline-flex items-start gap-3 text-sm">
                    <input
                      id="consent"
                      name="consent"
                      type="checkbox"
                      required
                      class="mt-1 h-4 w-4 rounded-sm border-[color:var(--color-border)] text-[color:var(--color-primary)]
                           focus:outline-none focus:ring-2 focus:ring-[color:var(--color-ring)]"
                    />
                    <span set:html={consentHtml} />
                  </label>
                  <p class="field-error text-xs text-[color:var(--color-danger)] hidden">
                    Debes aceptar la política.
                  </p>
                </div>
              )
            }
          </div>

          <!-- Alertas -->
          <div
            id="formAlert"
            class="hidden text-sm p-3 rounded-lg ring-1"
            aria-live="polite"
          >
          </div>

          <!-- Actions -->
          <div class="flex items-center gap-3">
            <button id="submitBtn" type="submit" class="btn btn-primary">
              <span class="btn-text">{submitLabel}</span>
              <span class="btn-spinner hidden">
                <svg
                  class="h-4 w-4 animate-spin"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                >
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="3"
                    fill="none"
                    opacity=".2"></circle>
                  <path
                    d="M12 2a10 10 0 0 1 10 10"
                    stroke="currentColor"
                    stroke-width="3"
                    fill="none"></path>
                </svg>
              </span>
            </button>
            <p class="text-xs text-[color:var(--color-fg-muted)]">
              Respondemos en ~24&nbsp;h
            </p>
          </div>
        </form>
      </div>
    </div>
  </div>
</Section>

<style is:inline>
  /* estados de error/ok en inputs */
  .is-invalid {
    outline: none !important;
    box-shadow: none !important;
    border-color: transparent !important;
    ring: none !important;
  }
</style>

<script is:inline>
  (function () {
    var form = document.getElementById("contactForm");
    if (!form) return;

    var action =
      form.getAttribute("data-action") ||
      form.getAttribute("action") ||
      "/api/contact";
    var alertBox = document.getElementById("formAlert");
    var submitBtn = document.getElementById("submitBtn");
    var btnText = submitBtn && submitBtn.querySelector(".btn-text");
    var btnSpinner = submitBtn && submitBtn.querySelector(".btn-spinner");

    function showAlert(kind, msg) {
      if (!alertBox) return;
      alertBox.classList.remove("hidden");
      alertBox.textContent = msg;
      if (kind === "success") {
        alertBox.style.background =
          "color-mix(in oklch, var(--color-success) 15%, transparent)";
        alertBox.style.borderColor = "var(--color-success)";
        alertBox.style.color = "var(--color-fg)";
      } else {
        alertBox.style.background =
          "color-mix(in oklch, var(--color-danger) 15%, transparent)";
        alertBox.style.borderColor = "var(--color-danger)";
        alertBox.style.color = "var(--color-fg)";
      }
    }

    function hideAlert() {
      if (!alertBox) return;
      alertBox.classList.add("hidden");
      alertBox.textContent = "";
      alertBox.removeAttribute("style");
    }

    function setLoading(isLoading) {
      if (!submitBtn) return;
      submitBtn.disabled = isLoading;
      if (btnText) btnText.classList.toggle("hidden", isLoading);
      if (btnSpinner) btnSpinner.classList.toggle("hidden", !isLoading);
    }

    function fieldError(input, show, message) {
      var group = input.closest(".flex") || input.parentElement;
      var msgEl = group ? group.querySelector(".field-error") : null;

      input.setAttribute("aria-invalid", show ? "true" : "false");
      if (msgEl) {
        msgEl.classList.toggle("hidden", !show);
        if (message) msgEl.textContent = message;
      }
    }

    function validate(values) {
      var ok = true;

      var name = form.querySelector("#name");
      if (name) {
        var v = (values.name || "").trim();
        var bad = !v;
        fieldError(name, bad, "Ingresa tu nombre.");
        ok = ok && !bad;
      }

      var email = form.querySelector("#email");
      if (email) {
        var ve = (values.email || "").trim();
        var badE = !ve || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(ve);
        fieldError(email, badE, "Ingresa un email válido.");
        ok = ok && !badE;
      }

      var phone = form.querySelector("#phone");
      if (phone && values.phone) {
        var vp = (values.phone || "").trim();
        var badP = !/^[0-9+()\s-]{6,15}$/.test(vp);
        fieldError(phone, badP, "Teléfono inválido.");
        ok = ok && !badP;
      }

      var consent = form.querySelector("#consent");
      if (consent) {
        var badC = !form.querySelector("#consent").checked;
        fieldError(consent, badC, "Debes aceptar la política.");
        ok = ok && !badC;
      }

      return ok;
    }

    form.addEventListener("submit", function (e) {
      // Mejora progresiva: si JS falla, el submit natural funciona.
      e.preventDefault();
      hideAlert();

      var fd = new FormData(form);
      // honeypot
      if ((fd.get("hp") || "").toString().trim()) {
        showAlert("error", "No se pudo enviar el formulario.");
        return;
      }

      // a objeto
      var values = {};
      fd.forEach(function (v, k) {
        values[k] = String(v).trim();
      });

      if (!validate(values)) {
        var firstInvalid = form.querySelector('[aria-invalid="true"]');
        if (firstInvalid && firstInvalid.focus) firstInvalid.focus();
        return;
      }

      setLoading(true);

      fetch(action, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(values),
      })
        .then(function (res) {
          if (!res.ok) throw new Error("Bad status");
          return res.json().catch(function () {
            return { ok: true };
          });
        })
        .then(function () {
          showAlert(
            "success",
            form.getAttribute("data-success") ||
              "¡Gracias! Hemos recibido tu mensaje y te contactaremos pronto."
          );
          form.reset();
        })
        .catch(function () {
          showAlert(
            "error",
            form.getAttribute("data-error") ||
              "Ocurrió un error al enviar el formulario. Inténtalo nuevamente."
          );
        })
        .finally(function () {
          setLoading(false);
        });
    });
  })();
</script>
